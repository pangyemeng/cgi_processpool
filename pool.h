#ifndef POOL_H_
#define POOL_H_

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <stdlib.h>
#include <sys/epoll.h>
#include <signal.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include "debug.h"

/*进程*/
class process
{
	public:
		process() : m_pid(-1)
		{
		}
	public:
		pid_t m_pid;
		int m_pipefd[2];
};

template <typename T>
class processpool
{
	public:
		//单例模式
		static processpool<T>* create(int listenfd, int process_number = 8)
		{
			if(!m_instance)
			{
				m_instance = new processpool<T>(listenfd, process_number);
			}
			return m_instance;
		}
		~processpool()
		{
			delete [] m_sub_process;
		}
		//启动线程
		void run();

	private:
		//将构造函数定义为私有的，因此我们只能通过后面的create静态函数来创建processpool实例
		processpool(int listenfd, int process_number = 8);
		//运行父进程
		void run_parent();
		//运行子进程
		void run_child();
		//管道设置
		void setup_sig_pipe();

	private:
		//进程池运行的最大子进程数量
		static const int MAX_PROCESS_NUMBER = 16;
		//每个子进程最多能处理的客户数量
		static const int USER_PER_PROCESS = 65536;
		//epoll最多能处理的事件数
		static const int MAX_EVENT_NUMBER = 10000;
		//每个进程都有一个epoll内核事件表，用m_epollfd标识
		int m_epollfd;
		//主进程监听描述符
		int m_listenfd;
		//保存所有子进程的描述信息
		process * m_sub_process;
		//进程池中的进程总数
		int m_process_number;
		//子进程在池中的序号，从0开始
		int m_idx;
		//子进程通过m_stop来决定是否停止运行
		int m_stop;
		//静态进程池实现
		static processpool<T >* m_instance;
};

template<typename T> processpool<T>* processpool<T>::m_instance = NULL;

//用于处理信号的管道，以实现统一事件源。后面称之为信号管道。
static int sig_pipefd[2];

//对给定文件描述符设定为非阻塞
static int setnonblocking(int fd)
{
	int old_option = fcntl(fd, F_GETFL);
	int new_option = old_option | O_NONBLOCK;
	fcntl(fd, F_SETFL, new_option);
	return old_option;
}

//添加文件描述符到epollfd中
static void addfd(int epollfd, int fd)
{
	epoll_event event;
	event.data.fd = fd;
	event.events = EPOLLIN | EPOLLET;
	epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &event);
	setnonblocking(fd);
}

//从epollfd标识的epoll内核事件表中删除fd上的所有注册事件
static void removefd(int epollfd, int fd)
{
	epoll_ctl(epollfd, EPOLL_CTL_DEL, fd, 0);
	close(fd);
}

//信号处理句柄
static void sig_handler(int sig)
{
	int save_errno = errno;
	int msg = sig;
	send(sig_pipefd[1], (char *)&msg, 1, 0);
	errno = save_errno;
}

//添加信号
static void addsig(int sig, void(handler)(int), bool restart = true)
{
	struct sigaction sa;
	memset(&sa, '\0', sizeof(sa));
	sa.sa_handler = handler;
	if(restart)
	{
		sa.sa_flags |= SA_RESTART;
	}
	sigfillset(&sa.sa_mask);
	sigaction(sig, &sa, NULL);
}

//进程池构造函数，参数listenfd是监听socket，它必须在创建进程池之前被创建，否则子进程无法直接饮用它。
template< typename T>
processpool< T >::processpool(int listenfd, int process_number):m_listenfd(listenfd), m_process_number(process_number), m_idx(-1),m_stop(false)
{
	if((process_number <= 0) && (process_number > MAX_PROCESS_NUMBER))
	{
		PRINT_ERROR("check param\n");
		return;
	}

	m_sub_process = new process[process_number];
	if(NULL == m_sub_process)
	{
		PRINT_ERROR("new process fail\n");
		return;
	}
	//创建process_number个子进程，并建立它们和父进程之间的管道
	for(int i = 0; i < process_number; ++i)
	{
		int ret = socketpair(PF_UNIX, SOCK_STREAM, 0, m_sub_process[i].m_pipefd);
		if(ret != 0)
		{
			PRINT_ERROR("socketpair fail\n");
			return;
		}
		m_sub_process[i].m_pid = fork();
		if(m_sub_process[i].m_pid > 0)
		{
			//fork返回大于0 父进程
			close(m_sub_process[i].m_pipefd[1]); //文件描述句柄被复制了一份，必须关闭一端
			continue;
		}
		else
		{	//子进程
			close(m_sub_process[i].m_pipefd[0]);
			m_idx = i;
			break;
		}
	}
}

template< typename T>
void processpool< T >::setup_sig_pipe()
{
	//创建epoll 事件监听表和信号管道
	m_epollfd = epoll_create(5);
	if(m_epollfd == -1)
	{
		PRINT_ERROR("epoll_create fail\n");
		return;
	}

	int ret = socketpair(PF_UNIX, SOCK_STREAM, 0, sig_pipefd);
	if(ret == -1)
	{
		PRINT_ERROR("socketpair fail\n");
		return;
	}
	setnonblocking(sig_pipefd[1]);
	addfd(m_epollfd, sig_pipefd[0]);

	addsig(SIGCHLD, sig_handler);
	addsig(SIGTERM, sig_handler);
	addsig(SIGINT, sig_handler);
	addsig(SIGPIPE, SIG_IGN);
}

template< typename T>
void processpool< T >::run()
{
	if(m_idx != -1)
	{
		run_child();
		return;
	}
	run_parent();
}

template<typename T>
void processpool<T>::run_child()
{
	setup_sig_pipe();
	//每个子进程都通过其在进程池中的序号值m_idx找到与父进程通信的管道
	int pipefd = m_sub_process[m_idx].m_pipefd[1];
	addfd(m_epollfd, pipefd);

	epoll_event events[MAX_EVENT_NUMBER];
	T* users = new T[USER_PER_PROCESS];
	if(NULL == users)
	{
		PRINT_ERROR("new fail\n");
		return;
	}
	int number = 0;
	int ret = -1;

	while(!m_stop)
	{
		number = epoll_wait(m_epollfd, events, MAX_EVENT_NUMBER, -1);
		if((number < 0) && (errno != EINTR))
		{
			PRINT_ERROR("epoll failure\n");
			break;
		}
		for(int i = 0; i < number; i++)
		{
			int sockfd = events[i].data.fd;
			if((sockfd == pipefd) && (events[i].events & EPOLLIN))
			{
				int client = 0;
				//从父-子进程间的管道读取数据，并将结果保存在变量client中。如果读取成功，则表示有新客户连接到来
				ret = recv(sockfd, (char *)&client, sizeof(client), 0);
				if(((ret < 0) && (errno != EAGAIN)) || ret == 0)
				{
					continue;
				}
				else
				{
					struct sockaddr_in client_address;
					socklen_t client_addrlength = sizeof(client_address);
					int connfd = accept(m_listenfd, (struct sockaddr *)&client_address, &client_addrlength);
					if(connfd < 0)
					{
						PRINT_ERROR("errno is: %d\n", errno);
						continue;
					}
					addfd(m_epollfd, connfd);

					users[connfd].init(m_epollfd, connfd, client_address);
				}
			}
			else if((sockfd == sig_pipefd[0]) && (events[i].events & EPOLLIN))
			{
				char signals[1024];
				ret = recv(sig_pipefd[0], signals, sizeof(signals), 0);
				if(ret <= 0)
				{
					continue;
				}
				else
				{
					for(int i = 0; i < ret; ++i)
					{
						switch (signals[i])
						{
							case SIGCHLD:
								pid_t pid;
								int stat;
								while((pid = waitpid(-1, &stat, WNOHANG)) > 0)
								{
									continue;
								}
								break;
							case SIGTERM:
							case SIGINT:
							{
								m_stop = true;
								break;
							}
							default:
								break;
						}

					}
				}
			}
			else if(events[i].events & EPOLLIN)
			{
				users[sockfd].process();
			}
			else
			{
				continue;
			}
		}
	}
	delete []users;
	users = NULL;
	close(m_epollfd);
}

template<typename T>
void processpool< T >::run_parent()
{
	setup_sig_pipe();

	//父进程监听m_listenfd;
	addfd(m_epollfd, m_listenfd);

	epoll_event events[MAX_EVENT_NUMBER];
	int sub_process_counter = 0;
	int new_conn = 1;
	int number = 0;
	int ret = -1;

	while(!m_stop)
	{
		number = epoll_wait(m_epollfd, events, MAX_EVENT_NUMBER, -1);
		if((number < 0) && (errno != EINTR))
		{
			PRINT_ERROR("epoll failure\n");
			break;
		}

		for(int i = 0; i < number; i++)
		{
			int sockfd = events[i].data.fd;
			if(sockfd == m_listenfd)
			{
				//如果有新连接到来，就采用RR方式将其分配给一个子进程处理
				int i = sub_process_counter;
				do
				{
					if(m_sub_process[i].m_pid != -1)
					{
						break;
					}
					i = (i + 1)% m_process_number;
				}while(i != sub_process_counter);

				if(m_sub_process[i].m_pid == -1)
				{
					m_stop = true;
					break;
				}
				sub_process_counter = (i + 1) % m_process_number;
				send(m_sub_process[i].m_pipefd[0], (char *)&new_conn, sizeof(new_conn), 0);
				PRINT_INFO("send request to child %d\n", i);
			}
			else if((sockfd == sig_pipefd[0]) && (events[i].events & EPOLLIN))
			{
				char signals[1024];
				ret = recv(sig_pipefd[0], signals, sizeof(signals), 0);
				if(ret <= 0)
				{
					continue;
				}
				else
				{
					for(int i = 0; i < ret; ++i)
					{
						switch (signals[i])
						{
							case SIGCHLD:
								pid_t pid;
								int stat;
								while((pid = waitpid(-1, &stat, WNOHANG)) > 0)
								{
									for(int i = 0; i < m_process_number; ++i)
									{
										/* 如果进程池中第i个子进程退出了，则主进程关闭相应的通信管道，
										 * 并设置相应的m_pid为-1，以标记该子进程已经退出*/
										if(m_sub_process[i].m_pid == pid)
										{
											PRINT_ERROR("child %d join\n", i);
											close(m_sub_process[i].m_pipefd[0]);
											m_sub_process[i].m_pid = -1;
										}
									}
								}
								//如果所有子进程都已经退出了，则父进程也退出
								m_stop = true;
								for(int i = 0; i < m_process_number; ++i)
								{
									if(m_sub_process[i].m_pid != -1)
									{
										m_stop = false;
									}
								}
								break;
							case SIGTERM:
							case SIGINT:
							{
								PRINT_ERROR("kill all the child now\n");
								for(int i = 0; i < m_process_number; ++i)
								{
									int pid = m_sub_process[i].m_pid;
									if(pid != -1)
									{
										kill(pid, SIGTERM);
									}
								}
								break;
							}
							default:
								break;
						}
					}
				}

			}
			else
			{
				continue;
			}
		}

	}
	close(m_epollfd);
}
#endif /* POOL_H_ */
